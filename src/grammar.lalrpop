use crate::language_definition::{
    TokenType, 
    ReservedWordType::*, 
    SymbolType::*,
    ExpressionType::*,
    RelopType::*,
    OpType::*,
    MulOpType::*,
};

grammar;

pub file: Vec<TokenType> = {
    <i:program> => i,
};

// PROGRAM -> (STATEMENT | FUNCLIST)?
pub program: Vec<TokenType> = {
    <i:epsilon> => vec![i],
    <i:statement> => i,
    <i:funclist> => i,
};

// FUNCLIST -> FUNCDEF FUNCLISTTAIL
pub funclist: Vec<TokenType> = {
    <i0:funcdef> <i1:funclisttail> => i0.into_iter().chain(i1.into_iter()).collect::<Vec<TokenType>>(),
};

pub funclisttail: Vec<TokenType> = {
    <i0:funcdef> <i1:funclisttail> => i0.into_iter().chain(i1.into_iter()).collect::<Vec<TokenType>>(),
    <i:epsilon> => vec![i],
};

// FUNCDEF -> def ident(PARAMLIST){STATELIST }
pub funcdef: Vec<TokenType> = {
    <i0:def_word> <i1:ident> <i2:oparenth> <i3:paramlist> <i4:cparenth> <i5:ocurly> <i6:statelist> <i7:ccurly> => {
        vec![i0]
        .into_iter()
        .chain(vec![i1].into_iter())
        .chain(vec![i2].into_iter())
        .chain(i3.into_iter())
        .chain(vec![i4].into_iter())
        .chain(vec![i5].into_iter())
        .chain(i6.into_iter())
        .chain(vec![i7].into_iter())
        .collect::<Vec<TokenType>>()
    },
};

// PARAMLIST -> ((int | float | string) ident, PARAMLIST | (int | float | string) ident)?
pub paramlist: Vec<TokenType> = {
    <i0:firstparam> <i1:otherparam> => {
        i0
        .into_iter()
        .chain(i1.into_iter())
        .collect::<Vec<TokenType>>()
    },
    <i:epsilon> => vec![i],
};

pub firstparam: Vec<TokenType> = {
    <i0:vartype> <i1:ident> => {
        vec![i0]
        .into_iter()
        .chain(vec![i1].into_iter())
        .collect::<Vec<TokenType>>()
    },
};

pub otherparam: Vec<TokenType> = {
    <i0:comma> <i1:vartype> <i2:ident> <i3:otherparam> => {
        vec![i0]
        .into_iter()
        .chain(vec![i1].into_iter())
        .chain(vec![i2].into_iter())
        .chain(i3.into_iter())
        .collect::<Vec<TokenType>>()
    },
    <i:epsilon> => vec![i],
};

// STATEMENT -> (VARDECL; | ATRIBSTAT; |  PRINTSTAT; | READSTAT; | RETURNSTAT; | IFSTAT | FORSTAT | {STATELIST } | break; |;)
pub statement: Vec<TokenType> = {
    <i0:vardecl> <i1:semicolon> => i0.into_iter().chain(vec![i1].into_iter()).collect::<Vec<TokenType>>(),
    <i0:attribstat> <i1:semicolon> => i0.into_iter().chain(vec![i1].into_iter()).collect::<Vec<TokenType>>(),
    <i0:printstat> <i1:semicolon> => i0.into_iter().chain(vec![i1].into_iter()).collect::<Vec<TokenType>>(),
    <i0:readstat> <i1:semicolon> => i0.into_iter().chain(vec![i1].into_iter()).collect::<Vec<TokenType>>(),
    <i0:returnstat> <i1:semicolon> => i0.into_iter().chain(vec![i1].into_iter()).collect::<Vec<TokenType>>(),
    <i0:funccall> <i1:semicolon> => i0.into_iter().chain(vec![i1].into_iter()).collect::<Vec<TokenType>>(),
    <i:ifstat> => i,
    <i:forstat> => i,
    <i0:ocurly> <i1:statelist> <i2:ccurly> => vec![i0].into_iter().chain(i1.into_iter()).chain(vec![i2].into_iter()).collect::<Vec<TokenType>>(),
    <i0:break_word> <i1:semicolon> => vec![i0].into_iter().chain(vec![i1].into_iter()).collect::<Vec<TokenType>>(),
    <i:semicolon> => vec![i],
};

// VARDECL -> (int | float | string) ident DIMENSIONS
pub vardecl: Vec<TokenType> = {
    <i0:vartype> <i1:ident> <i2:dimensions> => {
        vec![i0]
        .into_iter()
        .chain(vec![i1].into_iter())
        .chain(i2.into_iter())
        .collect::<Vec<TokenType>>()
    }
};

// DIMENSIONS -> ([int_constant])*
pub dimensions: Vec<TokenType> = {
    <i0:obrack> <i1:int_constant> <i2:cbrack> <i3:dimensions> => {
        vec![i0]
        .into_iter()
        .chain(vec![i1].into_iter())
        .chain(vec![i2].into_iter())
        .chain(i3.into_iter())
        .collect::<Vec<TokenType>>()
    },
    <i:epsilon> => vec![i],
};


// ATRIBSTAT -> LVALUE = RVALUE
pub attribstat: Vec<TokenType> = {
    <i0:lvalue> <i1:attrib> <i2:rvalue> => i0.into_iter().chain(vec![i1].into_iter()).chain(i2.into_iter()).collect::<Vec<TokenType>>(),
};

// RVALUE -> (EXPRESSION | ALLOCEXPRESSION | FUNCCALL)
pub rvalue: Vec<TokenType> = {
    <i:expression> => i,
    <i:allocexpression> => i,
    <i:funccall> => i,
};

// FUNCCALL -> ident(PARAMLISTCALL)
pub funccall: Vec<TokenType> = {
    <i0:ident> <i1:oparenth> <i2:paramlistcall> <i3:cparenth> => vec![i0].into_iter().chain(vec![i1].into_iter()).chain(i2.into_iter()).chain(vec![i3].into_iter()).collect::<Vec<TokenType>>(),     
};      
        
// PARAMLISTCALL -> (ident, PARAMLISTCALL | ident)?
pub paramlistcall: Vec<TokenType> = {
    <i0:ident> <i1:otherparamlistcall> => vec![i0].into_iter().chain(i1.into_iter()).collect::<Vec<TokenType>>(),
    <i:epsilon> => vec![i],
};

pub otherparamlistcall: Vec<TokenType> = {
    <i0:comma> <i1:ident> <i2:otherparamlistcall> => vec![i0].into_iter().chain(vec![i1].into_iter()).chain(i2.into_iter()).collect::<Vec<TokenType>>(),
    <i:epsilon> => vec![i],
};

// PRINTSTAT -> print EXPRESSION
pub printstat: Vec<TokenType> = {
    <i0:print_word> <i1:expression> => vec![i0].into_iter().chain(i1.into_iter()).collect::<Vec<TokenType>>(),
};

// READSTAT -> read LVALUE
pub readstat: Vec<TokenType> = {
    <i0:read_word> <i1:lvalue> => vec![i0].into_iter().chain(i1.into_iter()).collect::<Vec<TokenType>>(),
}

// RETURNSTAT -> return
pub returnstat: Vec<TokenType> = {
    <i0:return_word> <i1:returnexpression> => vec![i0].into_iter().chain(i1.into_iter()).collect::<Vec<TokenType>>(),
};

pub returnexpression: Vec<TokenType> = {
    <i:expression> => i,
    <i:epsilon> => vec![i],
};

// IFSTAT -> if (EXPRESSION) STATEMENT ELSE_GEN
pub ifstat: Vec<TokenType> = {
    <i0:if_word> <i1:oparenth> <i2:expression> <i3:cparenth> <i4:ocurly> <i5:statelist> <i6:ccurly> <i7:else_gen> => {
        vec![i0]
        .into_iter()
        .chain(vec![i1].into_iter())
        .chain(i2.into_iter())
        .chain(vec![i3].into_iter())
        .chain(vec![i4].into_iter())
        .chain(i5.into_iter())
        .chain(vec![i6].into_iter())
        .chain(i7.into_iter())
        .collect::<Vec<TokenType>>()
    },
};

// ELSE_GEN -> (else {STATELIST})?
pub else_gen: Vec<TokenType> = {
    <i0:epsilon> => vec![i0],
    <i0:else_word> <i1:ocurly> <i2:statelist> <i3:ccurly> => 
        vec![i0]
        .into_iter()
        .chain(vec![i1].into_iter())
        .chain(i2.into_iter())
        .chain(vec![i3].into_iter())
        .collect::<Vec<TokenType>>()
};

// FORSTAT -> for(ATRIBSTAT; EXPRESSION; ATRIBSTAT) STATEMENT
pub forstat: Vec<TokenType> = {
    <i0:for_word> <i1:oparenth> <i2:attribstat> <i3:semicolon> <i4:expression> <i5:semicolon> <i6:attribstat> <i7:cparenth> <i8:statement> => {
        vec![i0]
        .into_iter()
        .chain(vec![i1].into_iter())
        .chain(i2.into_iter())
        .chain(vec![i3].into_iter())
        .chain(i4.into_iter())
        .chain(vec![i5].into_iter())
        .chain(i6.into_iter())
        .chain(vec![i7].into_iter())
        .chain(i8.into_iter())
        .collect::<Vec<TokenType>>()
    },
};

// STATELIST -> STATEMENT (STATELIST)?
pub statelist: Vec<TokenType> = {
    <i0:statement> <i1:statelisttail> => {
        i0
        .into_iter()
        .chain(i1.into_iter())
        .collect::<Vec<TokenType>>()
    },
};

pub statelisttail: Vec<TokenType> = {
    <i:epsilon> => vec![i],
    <i:statelist> => i,
};

// TO-DO: ALLOCEXPRESSION -> new (int | float | string) ([NUMEXPRESSION])+
pub allocexpression: Vec<TokenType> = {
    <i0:new_word> <i1:vartype> <i2:allocexpressiondimensions> => {
        vec![i0]
        .into_iter()
        .chain(vec![i1].into_iter())
        .chain(i2.into_iter())
        .collect::<Vec<TokenType>>()},
};

pub allocexpressiondimensions: Vec<TokenType> = {
    <i:epsilon> => vec![i],
    <i0:obrack> <i1:numexpression> <i2:cbrack> <i3:allocexpressiondimensions> => {
        vec![i0]
        .into_iter()
        .chain(i1.into_iter())
        .chain(vec![i2].into_iter())
        .chain(i3.into_iter())
        .collect::<Vec<TokenType>>()
    },
};

// EXPRESSION -> NUMEXPRESSION RELOP_GEN
pub expression: Vec<TokenType> = {
    <i0:numexpression> <i1:relop_gen> => i0.into_iter().chain(i1.into_iter()).collect::<Vec<TokenType>>(),
};

// RELOP_GEN -> ((< | > | <= | >= | == | ! =) NUMEXPRESSION)?
pub relop_gen: Vec<TokenType> = {
    <i0:relop> <i1:numexpression> => vec![i0].into_iter().chain(i1.into_iter()).collect::<Vec<TokenType>>(),
    <i:epsilon> => vec![i],
};

// NUMEXPRESSION -> TERM NUMEXPRESSION_GENERATOR
pub numexpression: Vec<TokenType> = {
    <i0:term> <i1:numexpression_generator> => {
        i0
        .into_iter()
        .chain(i1.into_iter())
        .collect::<Vec<TokenType>>()
    },  
};      
        
// NUMEXPRESSION_GENERATOR -> ((+ |-) TERM)*
pub numexpression_generator: Vec<TokenType> = {
    <i:epsilon> => vec![i],
    <i0:addop> <i1:term> <i2:numexpression_generator>  => {
        vec![i0]
        .into_iter()
        .chain(i1.into_iter())
        .chain(i2.into_iter()) 
        .collect::<Vec<TokenType>>()
    },
};

// TERM -> UNARYEXPR TERM_GENERATOR
pub term: Vec<TokenType> = {
    <i0:unaryexpr> <i1:term_generator> => {
        i0
        .into_iter()
        .chain(i1.into_iter())
        .collect::<Vec<TokenType>>()
    },  
}; 

// TERM_GENERATOR -> ((* | / | %) UNARYEXPR)*
pub term_generator: Vec<TokenType> = {
    <i:epsilon> => vec![i],
    <i0:mulop> <i1:unaryexpr> <i2:term_generator>  => {
        vec![i0]
        .into_iter()
        .chain(i1.into_iter())
        .chain(i2.into_iter())
        .collect::<Vec<TokenType>>()
    },
};


// UNARYEXPR -> ((+ | -))? FACTOR
pub unaryexpr: Vec<TokenType> = {
    <i:factor> => i,
    <i0:addop> <i1:factor> => vec![i0].into_iter().chain(i1.into_iter()).collect::<Vec<TokenType>>(),
};

// FACTOR -> (int_constant | float_constant | string_constant | LVALUE |(NUMEXPRESSION))
pub factor: Vec<TokenType> = {
    <i:int_constant> => vec![i],
    <i:float_constant> => vec![i],
    <i:string_constant> => vec![i],
    <i:lvalue> => i,
    <i0:oparenth> <i1:numexpression> <i2:cparenth> => vec![i0].into_iter().chain(i1.into_iter()).chain(vec![i2].into_iter()).collect::<Vec<TokenType>>(),
};

// LVALUE -> ident allocexpressiondimensions
pub lvalue: Vec<TokenType> = {
    <i0:ident> <i1:allocexpressiondimensions> => vec![i0].into_iter().chain(i1.into_iter()).collect::<Vec<TokenType>>(),
};

pub ident: TokenType = {
    <value:r"[a-zA-Z][a-zA-Z0-9_]*"> => TokenType::Expression(Ident(value.to_string()), 0),
};

pub int_constant: TokenType = {
    <value:r"\d+"> => TokenType::Expression(IntConst(value.to_string()), 0),
}

pub float_constant: TokenType = {
    <value:r"\d+\.\d*"> => TokenType::Expression(FloatConst(value.to_string()), 0),
}

pub string_constant: TokenType = {
    <value:r#"".*""#> => TokenType::Expression(StrConst(value.to_string()), 0),
}

pub semicolon: TokenType = {
    ";" => TokenType::Symbol(Semicolon),
};

pub comma: TokenType = {
    "," => TokenType::Symbol(Comma),
};

pub addop: TokenType = {
    "+" => TokenType::Expression(Op(Add), 0),
    "-" => TokenType::Expression(Op(Sub), 0),
};

pub mulop: TokenType = {
    "*" => TokenType::Expression(MulOp(Mul), 0),
    "/" => TokenType::Expression(MulOp(Div), 0),
    "%" => TokenType::Expression(MulOp(Mod), 0),
};

pub relop: TokenType = {
    "==" => TokenType::Expression(Relop(Equal), 0),
    "<>" => TokenType::Expression(Relop(Diff), 0),
    "<" => TokenType::Expression(Relop(Less), 0),
    ">" => TokenType::Expression(Relop(Greater), 0),
    "<=" => TokenType::Expression(Relop(EqualLess), 0),
    ">=" => TokenType::Expression(Relop(EqualGreater), 0),
};

pub vartype: TokenType = {
    "int" => TokenType::ReservedWord(Int),
    "string" => TokenType::ReservedWord(String),
    "float" => TokenType::ReservedWord(Float),
}

pub attrib: TokenType = {
    "=" => TokenType::Symbol(Attrib),
}

pub oparenth: TokenType = {
    "(" => TokenType::Symbol(OParenth),
} 
pub cparenth: TokenType = {
    ")" => TokenType::Symbol(CParenth),
} 
pub obrack: TokenType = {
    "[" => TokenType::Symbol(OBrack),
} 
pub cbrack: TokenType = {
    "]" => TokenType::Symbol(CBrack),
}
pub ocurly: TokenType = {
    "{" => TokenType::Symbol(OCurly),
}
pub ccurly: TokenType = {
    "}" => TokenType::Symbol(CCurly),
}
pub epsilon: TokenType = {
    () => TokenType::Symbol(Epsilon)
}

pub def_word: TokenType = {
    "def" => TokenType::ReservedWord(Def),
}

pub for_word: TokenType = {
    "for" => TokenType::ReservedWord(For)
}

pub if_word: TokenType = {
    "if" => TokenType::ReservedWord(If)
}

pub else_word: TokenType = {
    "else" => TokenType::ReservedWord(Else)
}

pub return_word: TokenType = {
    "return" => TokenType::ReservedWord(Return)
}

pub break_word: TokenType = {
    "break" => TokenType::ReservedWord(Break)
}

pub new_word: TokenType = {
    "new" => TokenType::ReservedWord(New)
}

pub print_word: TokenType = {
    "print" => TokenType::ReservedWord(Print)
}

pub read_word: TokenType = {
    "read" => TokenType::ReservedWord(Read)
}